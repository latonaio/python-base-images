# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from aion.proto import status_pb2 as aion_dot_proto_dot_status__pb2


class KanbanStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.MicroserviceConn = channel.stream_stream(
        '/kanbanpb.Kanban/MicroserviceConn',
        request_serializer=aion_dot_proto_dot_status__pb2.Request.SerializeToString,
        response_deserializer=aion_dot_proto_dot_status__pb2.Response.FromString,
        )


class KanbanServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def MicroserviceConn(self, request_iterator, context):
    """最新のCカンバンを取得する
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_KanbanServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'MicroserviceConn': grpc.stream_stream_rpc_method_handler(
          servicer.MicroserviceConn,
          request_deserializer=aion_dot_proto_dot_status__pb2.Request.FromString,
          response_serializer=aion_dot_proto_dot_status__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kanbanpb.Kanban', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SendAnythingStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ServiceBrokerConn = channel.stream_stream(
        '/kanbanpb.SendAnything/ServiceBrokerConn',
        request_serializer=aion_dot_proto_dot_status__pb2.SendKanban.SerializeToString,
        response_deserializer=aion_dot_proto_dot_status__pb2.SendKanban.FromString,
        )
    self.SendToOtherDevices = channel.stream_unary(
        '/kanbanpb.SendAnything/SendToOtherDevices',
        request_serializer=aion_dot_proto_dot_status__pb2.SendContext.SerializeToString,
        response_deserializer=aion_dot_proto_dot_status__pb2.UploadStatus.FromString,
        )


class SendAnythingServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ServiceBrokerConn(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendToOtherDevices(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SendAnythingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ServiceBrokerConn': grpc.stream_stream_rpc_method_handler(
          servicer.ServiceBrokerConn,
          request_deserializer=aion_dot_proto_dot_status__pb2.SendKanban.FromString,
          response_serializer=aion_dot_proto_dot_status__pb2.SendKanban.SerializeToString,
      ),
      'SendToOtherDevices': grpc.stream_unary_rpc_method_handler(
          servicer.SendToOtherDevices,
          request_deserializer=aion_dot_proto_dot_status__pb2.SendContext.FromString,
          response_serializer=aion_dot_proto_dot_status__pb2.UploadStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'kanbanpb.SendAnything', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
